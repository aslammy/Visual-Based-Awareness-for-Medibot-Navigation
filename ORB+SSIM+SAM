# Visual-based Awareness for Medibot Navigation
# Syed Muhammad Aslam bin Syed Mohd Azizi
# 1719977
# Quantitative Performance Analysis using ORB, SSIM, SAM

# import the necessary packages
from skimage.metrics import structural_similarity
import cv2
from sewar import full_ref
from skimage import measure, metrics


# Works well with images of different dimensions
def orb_sim(img1, img2):
    orb = cv2.ORB_create()

    # detect keypoints and descriptors
    kp_a, desc_a = orb.detectAndCompute(img1, None)
    kp_b, desc_b = orb.detectAndCompute(img2, None)

    # define the bruteforce matcher object
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

    # perform matches.
    matches = bf.match(desc_a, desc_b)
    # Look for similar regions with distance < 50. Goes from 0 to 100 so pick a number between.
    similar_regions = [i for i in matches if i.distance < 50]
    if len(matches) == 0:
        return 0
    return len(similar_regions) / len(matches)


# Needs images to be same dimensions
def structural_sim(img1, img2):
    sim, diff = structural_similarity(img1, img2, full=True)
    return sim


img00 = cv2.imread('1RT.png', 0)
img01 = cv2.imread('1PT.png', 0)


orb_similarity = orb_sim(img00, img01)              # 1.0 means identical. Lower = not similar
print("Similarity using ORB is: ", orb_similarity)

ssim = structural_sim(img00, img01)                 # 1.0 means identical. Lower = not similar
print("Similarity using SSIM is: ", ssim)

sam = full_ref.sam(img00, img01)                    # 0 means identical. Higher = not similar
print("Spectral Angle Mapper: ", sam)
